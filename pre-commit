#!/usr/bin/env python3
import sys

import hooks_cfg as cfg

pre_commit_cfg = cfg.checks_cfg['pre-commit']

root_path = cfg.get_repo_path()


def _get_modified_files(endswith='.py'):
    _, modified_files_str, _ = cfg.run(
        'git diff-index --name-only --cached HEAD')
    modified_files = modified_files_str.strip().split()
    return [
        "%s/%s" % (root_path, fname) for fname in modified_files if
        fname.endswith(endswith)]


def _get_modified_files_str(endswith='.py'):
    modified_files = _get_modified_files(endswith=endswith)
    return ' '.join(modified_files)


def run_checks(command_items):
    """Run provided checks on modified files."""
    last_failed_exit_code = 0
    for command, fnames_str in command_items:
        exit_code, stdout, stderr = cfg.run(
            "%s %s" % (command, fnames_str))
        if exit_code:
            print("%s failed!\nSTDOUT: %s.\nSTDERR: %s\n" % (
                command, stdout, stderr), end='')
            last_failed_exit_code = exit_code
        else:
            print("%s OK!" % command, file=sys.stderr)
    if last_failed_exit_code:
        sys.exit(last_failed_exit_code)


def _get_check_arg_str(check_command, modified_files_str):
    ignore = pre_commit_cfg[check_command]['ignore']
    if ignore:
        return "--ignore=%s %s" % (ignore, modified_files_str)
    return modified_files_str


def get_command_items(*checks):
    """Generate command items to run checks.

    Args:
        *checks: number of different checks to run, like flake8,
            pydocstyle. Currently only flake8 and pydocstyle are
                implemented.
    Returns:
        list
        commands with their arguments to run wanted checks.
    """
    modified_files_str = _get_modified_files_str(endswith='.py')
    command_items = []
    for check in checks:
        command_items.append(
            (check, _get_check_arg_str(check, modified_files_str)))
    return command_items


checks = pre_commit_cfg['run']
run_checks(get_command_items(*checks))
